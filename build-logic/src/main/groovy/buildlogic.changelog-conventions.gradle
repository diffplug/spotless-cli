plugins {
	id 'com.diffplug.spotless-changelog'
	id 'buildlogic.release-prepare-packages-conventions'
}

spotlessChangelog {
	// need -Prelease=true in order to do a publish
	appendDashSnapshotUnless_dashPrelease=true
	// fail if the changelog is not properly formatted
	enforceCheck true

	if (project.hasProperty('releaseForceVersion') && project.releaseForceVersion != '') {
		forceNextVersion project.releaseForceVersion
	}
	commitMessage "Published v{{version}}"
	tagPrefix "v"
	// https://cli.github.com/manual/gh_release_create
	runAfterPush "gh release create v{{version}} --title 'spotless-cli v{{version}}' --notes-file app/build/release-notes.md --verify-tag ${getPathsOfReleaseBinaryZips().join(' ')}"
}

version = spotlessChangelog.versionNext

def changelogTaskGroup = 'Changelog'
tasks.register('changelogPrintCurrentVersion') {
	group = changelogTaskGroup
	description = 'Prints the current version of the project based on the changelog'
	def versionToPrint = spotlessChangelog.versionNext
	doLast {
		println "${versionToPrint}"
	}
}

tasks.register('changelogPrintUnreleasedVersionContent') {
	group = changelogTaskGroup
	description = 'Prints the content of the unreleased version in the changelog'
	def changelog = spotlessChangelog.parsedChangelog
	doLast {
		println "${changelog.unreleasedChanges()}"
	}
}

tasks.register('changelogPrintLatestVersionContent') {
	group = changelogTaskGroup
	description = 'Prints the content of the latest version in the changelog'
	def changelog = spotlessChangelog.parsedChangelog
	doLast {
		String changelogString = changelog.toStringUnix()
		String changeLog = changelogString.lines()
				.dropWhile { String line -> !line.startsWith("## [") } // latest version
				.skip(1) // skip the version line
				.takeWhile { String line -> !line.startsWith("## [") }
				.toList()
				.join("\n")
		println "${changeLog}"
	}
}
tasks.register('changelogPrintVersionContent') {
	group = changelogTaskGroup
	description = 'Prints the content of a specific version in the changelog'
	def changelog = spotlessChangelog.parsedChangelog

	def versionToPrint = project.getProperties().getOrDefault('changelogPrintVersion', '')
	doLast {
		if (versionToPrint == '') {
			throw new IllegalArgumentException("Please provide a version to print with -PchangelogPrintVersion=<version>")
		}
		String changelogString = changelog.toStringUnix()
		String changeLog = changelogString.lines()
				.dropWhile { String line -> !line.startsWith("## [${versionToPrint}]") }
				.skip(1) // skip the version line
				.takeWhile { String line -> !line.startsWith("## [") }
				.toList()
				.join("\n")
		println "${changeLog}"
	}
}
