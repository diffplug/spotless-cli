plugins {
	id 'buildlogic.java-application-conventions'
}

dependencies {
	implementation libs.picocli
	annotationProcessor libs.picocli.codegen
}

compileJava {
	// options for picocli codegen
	// https://github.com/remkop/picocli/tree/main/picocli-codegen#222-other-options
	options.compilerArgs += [
		"-Aproject=${project.group}/${project.name}",
		"-Aother.resource.bundles=application",
		// patterns require double-escaping (one escape is removed by groovy, the other one is needed in the resulting json file)
		"-Aother.resource.patterns=.*\\\\.properties,.*\\\\.json,.*\\\\.js"
	]
}

tasks.withType(ProcessResources).configureEach(new ApplicationPropertiesProcessResourcesAction(project.version))

class ApplicationPropertiesProcessResourcesAction implements Action<ProcessResources> {

	private final String cliVersion

	ApplicationPropertiesProcessResourcesAction(String cliVersion) {
		this.cliVersion = cliVersion
	}

	@Override
	void execute(ProcessResources processResources) {
		def localCliVersion = cliVersion // prevent issues with decorated closure
		processResources.filesMatching("application.properties") {
			filter(
					org.apache.tools.ant.filters.ReplaceTokens,
					tokens: [
						'cli.version': localCliVersion
					]
					)
		}
	}
}
