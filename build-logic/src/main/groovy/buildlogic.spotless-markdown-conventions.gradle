import com.diffplug.spotless.cli.picocli.usage.DocumentedUsages

plugins {
	id 'buildlogic.spotless-common-conventions'
}

spotless {
	freshmark {
		// freshmark for keeping markdown files up to date
		target '*.md'
		// provide lib versions to freshmark
		properties(new FreshmarkPropertiesAction(rootProject, project))
		properties {
			it.put('changeThisValueToForceCacheMiss', '1f31705c-b1c6-4bce-9831-98881431b721')
		}
		prettier() // prettier for markdown formatting
		endWithNewline()
	}
}

class FreshmarkPropertiesAction implements Action<Map<String, Object>> {

	private final Project rootProject
	private final Project project

	FreshmarkPropertiesAction(Project rootProject, Project project) {
		this.rootProject = rootProject
		this.project = project
	}

	@Override
	void execute(Map<String, Object> properties) {
		def versionsCollected = getVersionsCollected()
		properties.putAll(versionsCollected)
		def usageHelps = getUsageHelps()
		properties.putAll(usageHelps)
	}

	Map<String, String> getVersionsCollected() {
		Map<String, String> versionsCollected = [:]
		def nativeVersions = getLibsNativeVersions()
		versionsCollected.putAll(nativeVersions)
		def bundledVersions = getBundledVersions()
		versionsCollected.putAll(bundledVersions)
		return versionsCollected
	}

	Map<String, String> getLibsNativeVersions() {
		def versionCatalog = project.extensions.getByType(VersionCatalogsExtension).named("libs")
		Map<String, String> versionsCollected = [:]
		versionCatalog.versionAliases.each {versionAlias ->
			versionsCollected.put('libs.versions.' + versionAlias, versionCatalog.findVersion(versionAlias).get().toString())
		}
		return versionsCollected
	}

	Map<String, String> getBundledVersions() {
		Map<String, String> versionsCollected = [:]
		versionsCollected.put('libs.versions.bundled.prettier', com.diffplug.spotless.npm.PrettierFormatterStep.DEFAULT_VERSION)
		return versionsCollected
	}

	Map<String, Object> getUsageHelps() {
		Map<String, Object> usageHelps = [:]
		File outputDir = rootProject.file("app/build/generated-usages")

		DocumentedUsages.values().each { usage ->
			File usageFile = new File(outputDir, usage.fileName)
			usageHelps.put("usage.${usage.formatterStepName}.array".toString(), new UsageHelp(usageFile))
		}
		return usageHelps
	}
}


class UsageHelp implements Serializable {

	private final File usageFile

	UsageHelp(File usageFile) {
		this.usageFile = usageFile
	}

	@Override
	String toString() {
		if (usageFile.canRead()) {
			return asJsArrayOfLines(usageFile.readLines())
		}
		return '[]'
	}


	private static String asJsArrayOfLines(List<String> lines) {
		return '[' +
				lines.collect() { line -> "'${jsEscaped(line)}'" }
				.join(',\n') +
				']'
	}

	private static String jsEscaped(String str) {
		return str.replace('\\', '\\\\').replace("'", "\\'")
	}
}

tasks.named('spotlessFreshmark').configure {
	it.mustRunAfter(tasks.withType(Test))
	it.mustRunAfter(project(':app').tasks.withType(Test))

	it.dependsOn(project(':app').tasks.named('generateUsage'))
	it.inputs.dir('app/build/generated-usages')
}
